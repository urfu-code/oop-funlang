let _0 := fun(~f) fun(~x) ~x;
let succ := fun(~n) fun(~f) fun(~x) ~f (~n ~f ~x);
let pred := fun(~n) fun(~f) fun(~x) ~n (fun(~g) fun(~h) ~h (~g ~f)) (fun(~u) ~x) (fun(~u) ~u);
let _1 := succ _0;
let _2 := succ _1;
let _3 := succ _2;
let _4 := succ _3;
let _5 := succ _4;
let _6 := succ _5;
let _7 := succ _6;
let _8 := succ _7;
let _9 := succ _8;

let plus := fun(~m) fun(~n) fun(~f) fun(~x) ~m ~f (~n ~f ~x);
let sub := fun(~m) fun(~n) ~n pred ~m;
let isZero := fun(~n) ~n (fun(~x) false) true; 
let eq := fun(~n) fun(~m) isZero (sub ~n ~m);

true;
//>true
sub _1 _0;
isZero (sub _1 _0);
//>false

isZero (pred _1);
//>true
eq _1 (pred _2);
//>true
eq _4 (pred _5);
//>true


eq _7 (plus _6 _1);
//>true
eq _5 (sub _7 _2);
//>true

eq (sub _6 _3) (plus _2 _1);
//>true

eq _5 _1;
//>false

= 1;
//>= 1

+ 1;
//>+ 1
